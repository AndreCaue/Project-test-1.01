------------- reducer & Context

import P from 'prop-types'
import { createContext, useContext, useReducer, useRef } from 'react';
import './App.css';

//actions.js
export const actions = {
  CHANGE_TITLE: 'CHANGE_TITLE'
}

//eslint-disable-next-line
//data.js
export const initialState = {
  title: 'O titulo inicial',
  body: 'O body inicial',
  counter: 0.,
}
//reducer.js
//eslint-disable-next-line
export const reducer = (state, action) => {
  switch (action.type) {
    case actions.CHANGE_TITLE: {
      console.log('Mudando o titulo');
      return { ...state, title: action.payload }
    }
  }

  return { ...state }
}

//AppContext.jsx
export const Context = createContext();
export const AppContext = ({ children }) => {
  //eslint-disable-next-line
  const [state, dispatch] = useReducer(reducer, initialState);

  const changeTitle = (payload) => {
    dispatch({ type: actions.CHANGE_TITLE, payload })
  }

  return (
    <Context.Provider value={{ state, changeTitle }}>
      {children}
    </Context.Provider>
  )
}
AppContext.propTypes = {
  children: P.node,
}
//H1/index.jsx
export const H1 = () => {
  const context = useContext(Context);
  const inputRef = useRef();

  return (
    <>
      <h1 onClick={() => context.changeTitle(inputRef.current.value)}>{context.state.title}</h1>
      <input type='text' ref={inputRef} />
    </>
  );
}

//App.jsx
function App() {

  return (
    <AppContext>
      <div>
        <H1 />
      </div>
    </AppContext>
  )
}
export default App;


----------------myOwnHook

import { useEffect, useRef, useState } from "react";
//eslint-disable-next-line
const useMyHook = (cb, delay = 1000) => {
  const savedCb = useRef();

  useEffect(() => {
    savedCb.current = cb;
  }, [cb])

  useEffect(() => {
    //eslint-disable-next-line
    const interval = setInterval(() => {
      savedCb.current()
    }, delay);
    return () => clearInterval(interval)
  }, [delay])
};


function App() {
  //eslint-disable-next-line
  const [counter, setCounter] = useState(0);
  //eslint-disable-next-line
  const [delay, setDelay] = useState(1000)
  const [incrementor, setIncrementor] = useState(100)

  useMyHook(() => setCounter((c) => c + 1), delay)

  return (
    <div>
      <h1>Contador: {counter}</h1>
      <h1>Delay: {delay}</h1>
      <button onClick={() => { setDelay((d) => d + incrementor) }}>+{incrementor}</button>
      <button onClick={() => { setDelay((d) => d - incrementor) }}>-{incrementor}</button>
      <input type="number" value={incrementor} onChange={(e) => { setIncrementor(Number(e.target.value)) }} />
    </div>
  )
}

export default App;
